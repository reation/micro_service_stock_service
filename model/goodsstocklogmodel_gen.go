// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	goodsStockLogFieldNames          = builder.RawFieldNames(&GoodsStockLog{})
	goodsStockLogRows                = strings.Join(goodsStockLogFieldNames, ",")
	goodsStockLogRowsExpectAutoSet   = strings.Join(stringx.Remove(goodsStockLogFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), ",")
	goodsStockLogRowsWithPlaceHolder = strings.Join(stringx.Remove(goodsStockLogFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), "=?,") + "=?"

	OPERATION_TYPE_REDUCE   = 0
	OPERATION_TYPE_INCREASE = 1
	TYPE_ORDER_REDUCE       = 1
	TYPE_RETURN_INCREASE    = 2
	TYPE_SUPPLIER_INCREASE  = 3
	TYPE_SUPPLIER_REDUCE    = 4
)

type (
	goodsStockLogModel interface {
		Insert(ctx context.Context, data *GoodsStockLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GoodsStockLog, error)
		Update(ctx context.Context, data *GoodsStockLog) error
		Delete(ctx context.Context, id int64) error
		AddOrderReduceLog(ctx context.Context, goods_id, goods_num, order_id int64) error
	}

	defaultGoodsStockLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GoodsStockLog struct {
		Id            int64     `db:"id"`
		GoodsId       int64     `db:"goods_id"`       // 商品ID
		OperationType int64     `db:"operation_type"` // 操作类型 0:减少 1:增加
		OperationNum  int64     `db:"operation_num"`  // 操作数量
		Type          int64     `db:"type"`           // 操作类型 1:订单减少 2:退订单增加 3:供应商供货 4:供应商回收
		OperationId   int64     `db:"operation_id"`   // 操作ID type为1、2时为订单ID，为3、4时为供应商ID
		UpdateTime    time.Time `db:"update_time"`    // 更新时间
		CreateTime    time.Time `db:"create_time"`    // 创建时间
	}
)

func newGoodsStockLogModel(conn sqlx.SqlConn) *defaultGoodsStockLogModel {
	return &defaultGoodsStockLogModel{
		conn:  conn,
		table: "`goods_stock_log`",
	}
}

func (m *defaultGoodsStockLogModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGoodsStockLogModel) FindOne(ctx context.Context, id int64) (*GoodsStockLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", goodsStockLogRows, m.table)
	var resp GoodsStockLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodsStockLogModel) Insert(ctx context.Context, data *GoodsStockLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, goodsStockLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.GoodsId, data.OperationType, data.OperationNum, data.Type, data.OperationId)
	return ret, err
}

func (m *defaultGoodsStockLogModel) Update(ctx context.Context, data *GoodsStockLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, goodsStockLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.GoodsId, data.OperationType, data.OperationNum, data.Type, data.OperationId, data.Id)
	return err
}

func (m *defaultGoodsStockLogModel) AddOrderReduceLog(ctx context.Context, goods_id, goods_num, order_id int64) error {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, goodsStockLogRowsExpectAutoSet)
	_, err := m.conn.ExecCtx(ctx, query, goods_id, OPERATION_TYPE_REDUCE, goods_num, TYPE_ORDER_REDUCE, order_id)
	return err
}

func (m *defaultGoodsStockLogModel) tableName() string {
	return m.table
}
