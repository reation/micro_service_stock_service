// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: stock.proto

package protoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderReduceStockOperationClient is the client API for OrderReduceStockOperation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderReduceStockOperationClient interface {
	OrderReduceStock(ctx context.Context, in *OrderReduceStockRequest, opts ...grpc.CallOption) (*OrderReduceStockResponse, error)
}

type orderReduceStockOperationClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderReduceStockOperationClient(cc grpc.ClientConnInterface) OrderReduceStockOperationClient {
	return &orderReduceStockOperationClient{cc}
}

func (c *orderReduceStockOperationClient) OrderReduceStock(ctx context.Context, in *OrderReduceStockRequest, opts ...grpc.CallOption) (*OrderReduceStockResponse, error) {
	out := new(OrderReduceStockResponse)
	err := c.cc.Invoke(ctx, "/stock.OrderReduceStockOperation/OrderReduceStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderReduceStockOperationServer is the server API for OrderReduceStockOperation service.
// All implementations must embed UnimplementedOrderReduceStockOperationServer
// for forward compatibility
type OrderReduceStockOperationServer interface {
	OrderReduceStock(context.Context, *OrderReduceStockRequest) (*OrderReduceStockResponse, error)
	mustEmbedUnimplementedOrderReduceStockOperationServer()
}

// UnimplementedOrderReduceStockOperationServer must be embedded to have forward compatible implementations.
type UnimplementedOrderReduceStockOperationServer struct {
}

func (UnimplementedOrderReduceStockOperationServer) OrderReduceStock(context.Context, *OrderReduceStockRequest) (*OrderReduceStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderReduceStock not implemented")
}
func (UnimplementedOrderReduceStockOperationServer) mustEmbedUnimplementedOrderReduceStockOperationServer() {
}

// UnsafeOrderReduceStockOperationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderReduceStockOperationServer will
// result in compilation errors.
type UnsafeOrderReduceStockOperationServer interface {
	mustEmbedUnimplementedOrderReduceStockOperationServer()
}

func RegisterOrderReduceStockOperationServer(s grpc.ServiceRegistrar, srv OrderReduceStockOperationServer) {
	s.RegisterService(&OrderReduceStockOperation_ServiceDesc, srv)
}

func _OrderReduceStockOperation_OrderReduceStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReduceStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderReduceStockOperationServer).OrderReduceStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.OrderReduceStockOperation/OrderReduceStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderReduceStockOperationServer).OrderReduceStock(ctx, req.(*OrderReduceStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderReduceStockOperation_ServiceDesc is the grpc.ServiceDesc for OrderReduceStockOperation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderReduceStockOperation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stock.OrderReduceStockOperation",
	HandlerType: (*OrderReduceStockOperationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrderReduceStock",
			Handler:    _OrderReduceStockOperation_OrderReduceStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stock.proto",
}
